
#ifndef _BME66Silk_BME66Silk_h
#define _BME66Silk_BME66Silk_h


/*
 * BME66Silk.h -- part of the BME66Silk project.
 * Declarations for everything that was generated...
 * Frank Ma
 *  
 * 
 * Copyright (C) 2021 Frank Ma
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "548ddebe1f5340cf8f3e29bff8679ca84whNWGCPYp",
 * aka BME66Silk.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2019 Pat Deegan 
 * [https://psychogenic.com/ | https://inductive-kickback.com/]
 * and distributed under the terms of their respective licenses.
 * See https://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */



/* we need the SerialUI lib */
#include <SerialUI.h>


/* MySUI
 * Our SerialUI Instance, through which we can send/receive
 * data from users.
 */ 
extern SUI::SerialUI MySUI;

/* custom global scope definitions: */
#include <ArduinoSTL.h>
#include <vector>
#include <string>
#include <sstream>

const int INPUT_RELAY_PIN = A5;
const int OUTPUT_RELAY_PIN = A4;
const int CHAMBER_SENSOR_PIN = 7;
const int WASTE_SENSOR_PIN = 8;






// "heartbeat" function, called periodically while connected
void CustomHeartbeatCode(); 

/* ********* callbacks and validation functions ********* */



/* *** Silk Dialysis *** */
namespace SilkDialysis {

void SenseConductivityChanged();

void ChangeIntervalsChanged();

void doStartDialysis();

void InputPumpOnChanged();

void OutputPumpOnChanged();

} /* namespace SilkDialysis */



/* MyTracked
 * A structure to hold the tracked variables, which will 
 * automatically update the druid UI when modified by this 
 * program.
 */
typedef struct MyTrackedVarsContainerStruct{
	
	SerialUI::Tracked::Toggle InputPump;
	SerialUI::Tracked::Toggle OutputPump;
	SerialUI::Tracked::String ChambFull;
	SerialUI::Tracked::String WasteFull;
	// constructor to set sane startup vals
	MyTrackedVarsContainerStruct() : 
	InputPump(SUI_STR("InputPump"),false),
	OutputPump(SUI_STR("OutputPump"),false),
	ChambFull(SUI_STR("ChambFull"),""),
	WasteFull(SUI_STR("WasteFull"),"")
	{}
} MyTrackedVarsContainerSt;

extern MyTrackedVarsContainerSt MyTracked;



/*
 * The container for MyInputs, which
 * holds all the variables for the various inputs.
 */
typedef struct MyInputsContainerStruct {
	
	SerialUI::Menu::Item::Request::Toggle SenseConductivity;
	SerialUI::Menu::Item::Request::String ChangeIntervals;
	SerialUI::Menu::Item::Request::Toggle InputPumpOn;
	SerialUI::Menu::Item::Request::Toggle OutputPumpOn;
	// constructor to set sane startup vals
	MyInputsContainerStruct() : 
		SenseConductivity(false,SUI_STR("Sense Conductivity"),NULL,SilkDialysis::SenseConductivityChanged),
		ChangeIntervals("",SUI_STR("Change Intervals"),SUI_STR("Hours between changes, separated by ','"),request_inputstring_maxlen,SilkDialysis::ChangeIntervalsChanged),
		InputPumpOn(false,SUI_STR("Input Pump On"),NULL,SilkDialysis::InputPumpOnChanged),
		OutputPumpOn(false,SUI_STR("Output Pump On"),NULL,SilkDialysis::OutputPumpOnChanged)
	{}
} MyInputsContainerSt;

extern MyInputsContainerSt MyInputs;



/*
 * This container holds all the tracked variable views.
 */
typedef struct MyTrackedViewsContainerStruct {
	
	SerialUI::Menu::Item::View::CurrentValue Sensor;
	// constructor to set sane startup vals
	MyTrackedViewsContainerStruct() : 
		Sensor(SUI_STR("Sensor"),SUI_STR("Report of pump and sensor statuses."))
	{}
} MyTrackedViewsContainerSt;
extern MyTrackedViewsContainerSt MyViews;



/* ***** SetupSerialUI: where we'll be setting up menus and such **** */
bool SetupSerialUI();


#define DIE_HORRIBLY(msg)	for(;;){ MySUI.println(msg); delay(1000); }


#endif
